package de.jbdevelop.punchaclock.service.eventBus.wifi;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.util.Log;import org.greenrobot.eventbus.EventBus;import de.jbdevelop.punchaclock.helper.PACLog;import de.jbdevelop.punchaclock.helper.WifiHelper;import de.jbdevelop.punchaclock.model.Area;/** * Created by Jan on 30.03.2016. */public class  WifiComponent extends BroadcastReceiver {    private final String LOGCAT_TAG = "PAC-" + WifiComponent.class.getSimpleName();    private Context context;    private boolean isMultipleConnectReceive = false;    private boolean isMultipleDisconnectReceive = false;    public WifiComponent(Context context) {        this.context = context;        context.registerReceiver(this, new IntentFilter(WifiManager.NETWORK_STATE_CHANGED_ACTION));    }    @Override    public void onReceive(Context context, Intent intent) {        handleWifiChange(context);    }    private void handleWifiChange(Context context) {        WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);        WifiInfo wifiInfo = wifiManager.getConnectionInfo();        if(isWifiConnected(wifiInfo)){            if(isMultipleConnectReceive){                return;            }            PACLog.d(LOGCAT_TAG, "Connected to wifi: " + "SSID: " + wifiInfo.getSSID() + " | MAC of AP: " + wifiInfo.getBSSID());            postWifiConnected(wifiInfo);            isMultipleConnectReceive = true;            isMultipleDisconnectReceive = false;        }        else {            if(isMultipleDisconnectReceive){                return;            }            PACLog.d(LOGCAT_TAG, "Disconnected from wifi");            postWifiDisconnected();            isMultipleConnectReceive = false;            isMultipleDisconnectReceive = true;        }    }    private void postTriggerEnterArea(Area area) {        EventBus.getDefault().post(new TriggerEnterAreaEvent(area));    }    private void postWifiConnected(WifiInfo info) {        EventBus.getDefault().post(new WifiConnectedEvent(info));    }    private void postWifiDisconnected() {        EventBus.getDefault().post(new WifiDisconnectedEvent());    }    private boolean isWifiConnected(WifiInfo info) {        return info != null && info.getBSSID() != null && !info.getBSSID().equals(WifiHelper.UNKNOWN_MAC) ;    }}